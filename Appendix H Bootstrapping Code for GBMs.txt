#start bootstrapping code for NO_MAX Model----------------------------------------------------

#set working directory

library(tidyverse)													#load tidyverse

S <- 1000														#total number of times to iterate through bootstrapping loop

FullPivotTable <- read.csv("FullPivotTableShell.csv")									#load empty shell with every zcta facility combination

FullPivotTable <- FullPivotTable %>% mutate(LookUpValue = paste(bmomrzip4,GBMFacilityIndexNumber))			#add column for left_join/vlookup
	
BypassingData <- read.csv("BypassingData_v6WithNewVariablesThreshold15v2.csv")						#load bypassing data with zctas in same order as GBM model

Distance <- read.csv("DistanceMatrix.csv")										#load distance data, 374 x 28 matrix, rows are zctas and columns are birth facilities	 

Exponent <- 3.85 													#exponent for NO_MAX model

SubPopSizes <- c(50159,													#list out all sub population sizes
		 5048,
		 46327,
		 389,
		 6094,
		 730,
		 2577,
		 5862,
		 16027,
		 17487,
		 16544,
		 40471,
		 15646,
		 4764,
		 4007,
		 17072,
		 505,
		 8601,
		 4303,
		 22794,
		 19531,
		 22902,
		 28910,
		 1759,
		 911,
		 1183
		)													

NumberOfSubPops <- 26													#total number of sub population groups

W <- c(
	39119700,
	50093400,
	11574.9,
	20385200,
	17746.2,
	13872,
	9413470,
	9442070,
	3228690,
	45449400,
	72209.1,
	11339.2,
	9127430,
	1358.23,
	5951130,
	59782000,
	342615,
	22191.2,
	2958500,
	161688,
	34256.5,
	121647,
	1181160,
	34087.9,
	1.63075,
	31953.1,
	4013110,
	503706
	)														# Create W which is optimal decision variables for NO_MAX all births with exponent = 3.85

Utility <- data.frame(matrix(ncol = 28, nrow = 374))									#Create Utility for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				Utility[i,j] = W[j]/Distance[i,j]^Exponent
				}
		}													#calculate Utility for each zcta facility combination

TotalZCTAUtility <- rowSums(Utility)											#create and calculate total utility for each ZCTA

ExpectedPercentageCapture <- data.frame(matrix(ncol = 28, nrow = 374))							#created expected percentage capture for each zcta facility combination


for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedPercentageCapture[i,j] = Utility[i,j]/TotalZCTAUtility[i]
				}
		}													#calculate expected percentage capture for each zcta facility combination


for (k in 1:NumberOfSubPops)	#start of looping through all sub pops here --------------------------------------------------------------------------------------------------------------------
{

ModelPercentageErrorSummary <- data.frame(matrix(ncol=2,nrow=0)) 							#Set up data frame

x <- 1:S														#set range for number of times to calculate model % error

for (val in x) #start of bootstrap loop here ----------------------------------------------------------------------------------------------------------------------------------------------------
{

RandomSubset <- sample_n(BypassingData, SubPopSizes[k])									#randomly pick subpop size rows from the 56117 bypassing data set

RandomSubsetPivotTable <- RandomSubset %>% group_by(bmomrzip4,GBMFacilityIndexNumber) %>% summarise(Births = n())	#group by zip and facility index, count number of births

RandomSubsetPivotTable <- RandomSubsetPivotTable %>% mutate(LookUpValue = paste(bmomrzip4, GBMFacilityIndexNumber))	#add column for left_join/vlookup

RandomSubsetPivotTable <- RandomSubsetPivotTable[,c("LookUpValue","Births")]						#remove columns that are no longer needed

RandomSubsetPivotTable <- data.frame(RandomSubsetPivotTable)								#convert to data frame so left_join function can be used

ActualBirths <- left_join(FullPivotTable, RandomSubsetPivotTable, by = "LookUpValue")					#execut a vlookup via a left join that puts random subset of data into full GBM pivot table

ActualBirths[is.na(ActualBirths)] = 0											#convert NA's to 0's
									
ActualBirths <- subset(ActualBirths, select = -LookUpValue)								#remove column that is no longer needed					

ActualBirths <- ActualBirths %>% pivot_wider(names_from = GBMFacilityIndexNumber, values_from = Births)			#reshape so facilities are columns

ActualBirths <- ActualBirths[,c(											#ensure columns are in correct order, this also removes the  bmomrzip4 column
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10",
				"11",
				"12",
				"13",
				"14",
				"15",
				"16",
				"17",
				"18",
				"19",
				"20",
				"21",
				"22",
				"23",
				"24",
				"25",
				"26",
				"27",
				"28"
				)
			]

TotalZCTABirths <- rowSums(ActualBirths)										#create and calculate total births for each ZCTA

ExpectedBirths <- data.frame(matrix(ncol = 28, nrow = 374))								#Create expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedBirths[i,j] = TotalZCTABirths[i] * ExpectedPercentageCapture[i,j]
				}
		}													#calculate expected births for each zcta facility combination


AbsoluteValueActualMinusExpected <- data.frame(matrix(ncol = 28, nrow = 374))						#Create absolute value actual births minus expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				AbsoluteValueActualMinusExpected[i,j] = abs(ActualBirths[i,j] - ExpectedBirths[i,j])
				}
		}
															#calculate absolute value actual births minus expected births for each zcta facility combination

PercentageError <- sum(AbsoluteValueActualMinusExpected) / sum(ActualBirths)						#calculate model percentage error

newRow <- list(val, PercentageError)											#record iteration number, percentage error

ModelPercentageErrorSummary <- rbind(ModelPercentageErrorSummary, newRow)						#input iteration number and percentage error into summary data frame

} #end boostrap loop here -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

columnnames <- c("SampleNumber", "ModelPercentageError")								#list of column names

colnames(ModelPercentageErrorSummary) <- columnnames #give column titles to bypass rate by threshold data frame		#give output CSV file column names

ModelPercentageErrorSummary <- ModelPercentageErrorSummary %>% mutate(SampleNumber = as.numeric(SampleNumber), ModelPercentageError = as.numeric(ModelPercentageError))		#give output CSV file column names

write.csv(ModelPercentageErrorSummary, paste0("NO_MAXPercentageErrorSummaryN",SubPopSizes[k],"_S1000.csv"),row.names = FALSE)			#write csv file to directory

} #end subpop loop here --------------------------------------------------------------------------------------------------------------------------------------------


#end of boostrapping code for NO_MAX Model -----------------------------------------------------------------------------------










#start of bootstrapping code for UNIV_Max Model------------------------------------------------------------------

#set working directory

library(tidyverse)													#load tidyverse

S <- 1000														#total number of times to iterate through bootstrapping loop

FullPivotTable <- read.csv("FullPivotTableShell.csv")									#load empty shell with every zcta facility combination

FullPivotTable <- FullPivotTable %>% mutate(LookUpValue = paste(bmomrzip4,GBMFacilityIndexNumber))			#add column for left_join/vlookup
	
BypassingData <- read.csv("BypassingData_v6WithNewVariablesThreshold15v2.csv")						#load bypassing data with zctas in same order as GBM model

Distance <- read.csv("DistanceMatrix.csv")										#load distance data, 374 x 28 matrix, rows are zctas and columns are birth facilities	 

Exponent <- 3.00 													#exponent for UNIV_MAX model

SubPopSizes <- c(50159,													#list out all sub population sizes
		 5048,
		 46327,
		 389,
		 6094,
		 730,
		 2577,
		 5862,
		 16027,
		 17487,
		 16544,
		 40471,
		 15646,
		 4764,
		 4007,
		 17072,
		 505,
		 8601,
		 4303,
		 22794,
		 19531,
		 22902,
		 28910,
		 1759,
		 911,
		 1183
		)

NumberOfSubPops <- 26													#total number of sub population groups

MaxDistance <- 150;													#max distance for UNIV_MAX model

W <- c(
	6718.290,
	8601.540,
	11.867,
	3225.390,
	20.045,
	19.253,
	971.299,
	1805.600,
	1039.070,
	4373.780,
	73.486,
	5.706,
	328.173,
	1.140,
	894.115,
	6803.130,
	33.347,
	11.971,
	102.565,
	14.782,
	19.627,
	227.890,
	299.842,
	24.572,
	223.778,
	35.695,
	1333.580,
	252.436
	)														# Create W which is optimal decision variables for NO_MAX all births with exponent = 3.85
													
Utility <- data.frame(matrix(ncol = 28, nrow = 374))									#Create Utility for each zcta facility combination

for (i in 1:374){													#calculate Utility for each zcta facility combination
		for(j in 1:28)
				{
				Utility[i,j] = if_else(Distance[i,j] > MaxDistance, 0, W[j]/Distance[i,j]^Exponent)
				}
		}													

TotalZCTAUtility <- rowSums(Utility)											#create and calculate total utility for each ZCTA

ClosestDistance <- numeric()												#create closest facility distance parameter for each zcta

for (i in 1:374){													#calculate closest facility distance parameter for each zcta
		ClosestDistance [i] = min(
					Distance[i,1],
					Distance[i,2],
					Distance[i,3],
					Distance[i,4],
					Distance[i,5],
					Distance[i,6],
					Distance[i,7],
					Distance[i,8],
					Distance[i,9],
					Distance[i,10],
					Distance[i,11],
					Distance[i,12],
					Distance[i,13],
					Distance[i,14],
					Distance[i,15],
					Distance[i,16],
					Distance[i,17],
					Distance[i,18],
					Distance[i,19],
					Distance[i,20],
					Distance[i,21],
					Distance[i,22],
					Distance[i,23],
					Distance[i,24],
					Distance[i,25],
					Distance[i,26],
					Distance[i,27],
					Distance[i,28]
					)
		}


ModifiedDistance <- data.frame(matrix(ncol = 28, nrow = 374))									#Create ModifiedDistance parameter for each zcta facility combination
		
for (i in 1:374){														#Calculate ModifiedDistance parameter for each zcta facility combination
    		for(j in 1:28)
    				{
				ModifiedDistance[i,j] = if_else(TotalZCTAUtility[i] == 0 & Distance[i,j] == ClosestDistance[i], MaxDistance, Distance[i,j])
				}
		}

ModifiedUtility <- data.frame(matrix(ncol = 28, nrow = 374))									#Create ModifiedUtility for each zcta facility combination

for (i in 1:374){														#calculate ModifiedUtility for each zcta facility combination
		for(j in 1:28)
				{
				ModifiedUtility[i,j] = if_else(ModifiedDistance[i,j] > MaxDistance, 0, W[j]/ModifiedDistance[i,j]^Exponent)
				}
		}

ModifiedTotalZCTAUtility <- rowSums(ModifiedUtility)										#create and calculate total utility for each ZCTA

ExpectedPercentageCapture <- data.frame(matrix(ncol = 28, nrow = 374))							#created expected percentage capture for each zcta facility combination


for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedPercentageCapture[i,j] = ModifiedUtility[i,j]/ModifiedTotalZCTAUtility[i]
				}
		}													#calculate expected percentage capture for each zcta facility combination

for (k in 1:NumberOfSubPops)	#start of looping through all sub pops here --------------------------------------------------------------------------------------------------------------------
{

ModelPercentageErrorSummary <- data.frame(matrix(ncol=2,nrow=0)) 							#Set up data frame

x <- 1:S													#set range for number of times to calculate model % error

for (val in x) #start of bootstrap loop here ----------------------------------------------------------------------------------------------------------------------------------------------------
{

RandomSubset <- sample_n(BypassingData, SubPopSizes[k])									#randomly pick subpop size rows from the 56117 bypassing data set

RandomSubsetPivotTable <- RandomSubset %>% group_by(bmomrzip4,GBMFacilityIndexNumber) %>% summarise(Births = n())	#group by zip and facility index, count number of births

RandomSubsetPivotTable <- RandomSubsetPivotTable %>% mutate(LookUpValue = paste(bmomrzip4, GBMFacilityIndexNumber))	#add column for left_join/vlookup

RandomSubsetPivotTable <- RandomSubsetPivotTable[,c("LookUpValue","Births")]						#remove columns that are no longer needed

RandomSubsetPivotTable <- data.frame(RandomSubsetPivotTable)								#convert to data frame so left_join function can be used

ActualBirths <- left_join(FullPivotTable, RandomSubsetPivotTable, by = "LookUpValue")					#execut a vlookup via a left join that puts random subset of data into full GBM pivot table

ActualBirths[is.na(ActualBirths)] = 0											#convert NA's to 0's
									
ActualBirths <- subset(ActualBirths, select = -LookUpValue)								#remove column that is no longer needed					

ActualBirths <- ActualBirths %>% pivot_wider(names_from = GBMFacilityIndexNumber, values_from = Births)			#reshape so facilities are columns

ActualBirths <- ActualBirths[,c(											#ensure columns are in correct order, this also removes the  bmomrzip4 column
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10",
				"11",
				"12",
				"13",
				"14",
				"15",
				"16",
				"17",
				"18",
				"19",
				"20",
				"21",
				"22",
				"23",
				"24",
				"25",
				"26",
				"27",
				"28"
				)
			]

TotalZCTABirths <- rowSums(ActualBirths)										#create and calculate total births for each ZCTA

ExpectedBirths <- data.frame(matrix(ncol = 28, nrow = 374))								#Create expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedBirths[i,j] = TotalZCTABirths[i] * ExpectedPercentageCapture[i,j]
				}
		}													#calculate expected births for each zcta facility combination


AbsoluteValueActualMinusExpected <- data.frame(matrix(ncol = 28, nrow = 374))						#Create absolute value actual births minus expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				AbsoluteValueActualMinusExpected[i,j] = abs(ActualBirths[i,j] - ExpectedBirths[i,j])
				}
		}
															#calculate absolute value actual births minus expected births for each zcta facility combination

PercentageError <- sum(AbsoluteValueActualMinusExpected) / sum(ActualBirths)						#calculate model percentage error

newRow <- list(val, PercentageError)											#record iteration number, percentage error

ModelPercentageErrorSummary <- rbind(ModelPercentageErrorSummary, newRow)						#input iternation number and percentage error into summary data frame

} #end bootstrap loop here -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

columnnames <- c("SampleNumber", "ModelPercentageError")								#list of column names

colnames(ModelPercentageErrorSummary) <- columnnames #give column titles to bypass rate by threshold data frame		#give output CSV file column names

ModelPercentageErrorSummary <- ModelPercentageErrorSummary %>% mutate(SampleNumber = as.numeric(SampleNumber), ModelPercentageError = as.numeric(ModelPercentageError))		#give output CSV file column names

write.csv(ModelPercentageErrorSummary, paste0("UNIV_MAXPercentageErrorSummaryN",SubPopSizes[k],"_S1000.csv"),row.names = FALSE)			#write csv file to directory

} #end subpop loop here --------------------------------------------------------------------------------------------------------------------------------------------


#end of boostrapping code for UNIV_MAX Model----------------------------------------------------------------------









#start of bootstrapping code for FAC_DEMAND Model------------------------------------------------

setwd("C:/Users/v73p664/OneDrive - Montana State University/Perinatal Network research/Manuscript Bypassing/Part 2 (Facilites)/Bootstrapping")	#set working directory

library(tidyverse)													#load tidyverse

S <- 1000														#total number of times to iterate through bootstrapping loop

FullPivotTable <- read.csv("FullPivotTableShell.csv")									#load empty shell with every zcta facility combination

FullPivotTable <- FullPivotTable %>% mutate(LookUpValue = paste(bmomrzip4,GBMFacilityIndexNumber))			#add column for left_join/vlookup
	
BypassingData <- read.csv("BypassingData_v6WithNewVariablesThreshold15v2.csv")						#load bypassing data with zctas in same order as GBM model													# load tidry 

Distance <- read.csv("DistanceMatrix.csv")										#load distance data, 374 x 28 matrix, rows are zctas and columns are birth facilities	 

Exponent <- 1.4 													#exponent for UNIV_MAX model

SubPopSizes <- c(50159,													#list out all sub population sizes
		 5048,
		 46327,
		 389,
		 6094,
		 730,
		 2577,
		 5862,
		 16027,
		 17487,
		 16544,
		 40471,
		 15646,
		 4764,
		 4007,
		 17072,
		 505,
		 8601,
		 4303,
		 22794,
		 19531,
		 22902,
		 28910,
		 1759,
		 911,
		 1183
		)

NumberOfSubPops <- 26													#total number of sub population groups

MaxDistance <- c(													
		153.5,
		133.9,
		69,
		90,
		66.6,
		69.4,
		113.3,
		41.6,
		39.1,
		129,
		51.4,
		75.9,
		132.6,
		76.4,
		70.7,
		128.3,
		91.7,
		64.8,
		113.5,
		46,
		32.6,
		37.8,
		45.5,
		52.1,
		69.8,
		118.8,
		61.7,
		65.2
		)													#max distances for FAC_DEMAND model													
W <- c(
	423.296,
	542.063,
	73.2142,
	781.089,	
	109.224,	
	139.652,	
	153.673,	
	1173.62,	
	501.227,	
	544.373,	
	363.257,	
	19.4999,	
	194.383,	
	14.51,	
	143.763,	
	640.999,	
	22.1834,	
	28.8927,	
	67.0223,	
	54.2718,	
	36.7574,	
	90.7578,	
	188.396,	
	89.0475,	
	1.76337,	
	244.796,	
	923.199,	
	171.911
	)														# Create W which is optimal decision variables for NO_MAX all births with exponent = 3.85
													
Utility <- data.frame(matrix(ncol = 28, nrow = 374))									#Create Utility for each zcta facility combination

for (i in 1:374){													#calculate Utility for each zcta facility combination
		for(j in 1:28)
				{
				Utility[i,j] = if_else(Distance[i,j] > MaxDistance[j], 0, W[j]/Distance[i,j]^Exponent)
				}
		}													

TotalZCTAUtility <- rowSums(Utility)											#create and calculate total utility for each ZCTA

ClosestDistance <- numeric()												#create closest facility distance parameter for each zcta

for (i in 1:374){													#calculate closest facility distance parameter for each zcta
		ClosestDistance [i] = min(
					Distance[i,1],
					Distance[i,2],
					Distance[i,3],
					Distance[i,4],
					Distance[i,5],
					Distance[i,6],
					Distance[i,7],
					Distance[i,8],
					Distance[i,9],
					Distance[i,10],
					Distance[i,11],
					Distance[i,12],
					Distance[i,13],
					Distance[i,14],
					Distance[i,15],
					Distance[i,16],
					Distance[i,17],
					Distance[i,18],
					Distance[i,19],
					Distance[i,20],
					Distance[i,21],
					Distance[i,22],
					Distance[i,23],
					Distance[i,24],
					Distance[i,25],
					Distance[i,26],
					Distance[i,27],
					Distance[i,28]
					)
		}


ModifiedDistance <- data.frame(matrix(ncol = 28, nrow = 374))									#Create ModifiedDistance parameter for each zcta facility combination
		
for (i in 1:374){														#Calculate ModifiedDistance parameter for each zcta facility combination
    		for(j in 1:28)
    				{
				ModifiedDistance[i,j] = if_else(TotalZCTAUtility[i] == 0 & Distance[i,j] == ClosestDistance[i], MaxDistance[j], Distance[i,j])
				}
		}

ModifiedUtility <- data.frame(matrix(ncol = 28, nrow = 374))									#Create ModifiedUtility for each zcta facility combination

for (i in 1:374){														#calculate ModifiedUtility for each zcta facility combination
		for(j in 1:28)
				{
				ModifiedUtility[i,j] = if_else(ModifiedDistance[i,j] > MaxDistance[j], 0, W[j]/ModifiedDistance[i,j]^Exponent)
				}
		}

ModifiedTotalZCTAUtility <- rowSums(ModifiedUtility)									#create and calculate total utility for each ZCTA

ExpectedPercentageCapture <- data.frame(matrix(ncol = 28, nrow = 374))							#created expected percentage capture for each zcta facility combination


for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedPercentageCapture[i,j] = ModifiedUtility[i,j]/ModifiedTotalZCTAUtility[i]
				}
		}													#calculate expected percentage capture for each zcta facility combination

for (k in 1:NumberOfSubPops)	#start of looping through all sub pops here --------------------------------------------------------------------------------------------------------------------
{

ModelPercentageErrorSummary <- data.frame(matrix(ncol=2,nrow=0)) 							#Set up data frame

x <- 1:S														#set range for number of times to calculate model % error

for (val in x) #start of bootstrap loop here ----------------------------------------------------------------------------------------------------------------------------------------------------
{

RandomSubset <- sample_n(BypassingData, SubPopSizes[k])									#randomly pick subpop size rows from the 56117 bypassing data set

RandomSubsetPivotTable <- RandomSubset %>% group_by(bmomrzip4,GBMFacilityIndexNumber) %>% summarise(Births = n())	#group by zip and facility index, count number of births

RandomSubsetPivotTable <- RandomSubsetPivotTable %>% mutate(LookUpValue = paste(bmomrzip4, GBMFacilityIndexNumber))	#add column for left_join/vlookup

RandomSubsetPivotTable <- RandomSubsetPivotTable[,c("LookUpValue","Births")]						#remove columns that are no longer needed

RandomSubsetPivotTable <- data.frame(RandomSubsetPivotTable)								#convert to data frame so left_join function can be used

ActualBirths <- left_join(FullPivotTable, RandomSubsetPivotTable, by = "LookUpValue")					#execut a vlookup via a left join that puts random subset of data into full GBM pivot table

ActualBirths[is.na(ActualBirths)] = 0											#convert NA's to 0's
									
ActualBirths <- subset(ActualBirths, select = -LookUpValue)								#remove column that is no longer needed					

ActualBirths <- ActualBirths %>% pivot_wider(names_from = GBMFacilityIndexNumber, values_from = Births)			#reshape so facilities are columns

ActualBirths <- ActualBirths[,c(											#ensure columns are in correct order, this also removes the  bmomrzip4 column
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9",
				"10",
				"11",
				"12",
				"13",
				"14",
				"15",
				"16",
				"17",
				"18",
				"19",
				"20",
				"21",
				"22",
				"23",
				"24",
				"25",
				"26",
				"27",
				"28"
				)
			]

TotalZCTABirths <- rowSums(ActualBirths)										#create and calculate total births for each ZCTA

ExpectedBirths <- data.frame(matrix(ncol = 28, nrow = 374))								#Create expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				ExpectedBirths[i,j] = TotalZCTABirths[i] * ExpectedPercentageCapture[i,j]
				}
		}													#calculate expected births for each zcta facility combination


AbsoluteValueActualMinusExpected <- data.frame(matrix(ncol = 28, nrow = 374))						#Create absolute value actual births minus expected births for each zcta facility combination

for (i in 1:374){
		for(j in 1:28)
				{
				AbsoluteValueActualMinusExpected[i,j] = abs(ActualBirths[i,j] - ExpectedBirths[i,j])
				}
		}
															#calculate absolute value actual births minus expected births for each zcta facility combination

PercentageError <- sum(AbsoluteValueActualMinusExpected) / sum(ActualBirths)						#calculate model percentage error

newRow <- list(val, PercentageError)											#record iteration number, percentage error

ModelPercentageErrorSummary <- rbind(ModelPercentageErrorSummary, newRow)						#input iternation number and percentage error into summary data frame

} #end loop -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

columnnames <- c("SampleNumber", "ModelPercentageError")								#list of column names

colnames(ModelPercentageErrorSummary) <- columnnames #give column titles to bypass rate by threshold data frame		#give output CSV file column names

ModelPercentageErrorSummary <- ModelPercentageErrorSummary %>% mutate(SampleNumber = as.numeric(SampleNumber), ModelPercentageError = as.numeric(ModelPercentageError))		#give output CSV file column names

write.csv(ModelPercentageErrorSummary, paste0("FAC_DEMANDPercentageErrorSummaryN",SubPopSizes[k],"_S1000.csv"),row.names = FALSE)			#write csv file to directory

} #end subpop loop here --------------------------------------------------------------------------------------------------------------------------------------------


#end of boostrapping code for FAC_DEMAND Model--------------------------------------------------------------


